syntax = "proto3";

package liquidity.v1;

option go_package = "github.com/figment-networks/tendermint-protobuf-def/liquidity";

import "gogo.proto";
import "google/protobuf/descriptor.proto";
import "cosmos.v1.proto";
import "annotations.proto"; // protoc-gen-openapiv2/options/annotations.proto

message MsgSwapWithinBatch {
  option (gogoproto.equal)           = false;
  option (gogoproto.goproto_getters) = false;
  // address of swap requester
  string swap_requester_address = 1 [(gogoproto.moretags) = "yaml:\"swap_requester_address\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      description: "account address of the origin of this message",
      example: "\"cosmos1e35y69rhrt7y4yce5l5u73sjnxu0l33wvznyun\"",
      format: "sdk.AccAddress"
    }];
  // id of swap type, must match the value in the pool. Only `swap_type_id` 1 is supported.
  uint64 pool_id = 2 [(gogoproto.moretags) = "yaml:\"pool_id\"", (gogoproto.jsontag) = "pool_id",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint64"
    }];

  // id of swap type. Must match the value in the pool.
  uint32 swap_type_id = 3 [(gogoproto.moretags) = "yaml:\"swap_type_id\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1\"",
      format: "uint32"
    }];

  // offer sdk.coin for the swap request, must match the denom in the pool.
  cosmos.v1.Coin offer_coin = 4 [
    (gogoproto.nullable)     = false,
    (gogoproto.moretags)     = "yaml:\"offer_coin\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "{\"denom\": \"denomX\", \"amount\": \"1000000\"}",
      format: "sdk.Coin"
    }];

  // denom of demand coin to be exchanged on the swap request, must match the denom in the pool.
  string demand_coin_denom = 5 [(gogoproto.moretags) = "yaml:\"demand_coin_denom\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"denomB\"",
    }];

  // half of offer coin amount * params.swap_fee_rate and ceil for reservation to pay fees.
  cosmos.v1.Coin offer_coin_fee = 6 [
    (gogoproto.nullable)     = false,
    (gogoproto.moretags)     = "yaml:\"offer_coin_fee\"",
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "{\"denom\": \"denomX\", \"amount\": \"5000\"}",
      format: "sdk.Coin"
      }
  ];

  // limit order price for the order, the price is the exchange ratio of X/Y
  // where X is the amount of the first coin and Y is the amount 
  // of the second coin when their denoms are sorted alphabetically. 
  string order_price = 7 [
    (gogoproto.moretags)   = "yaml:\"order_price\"",
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Dec",
    (gogoproto.nullable)   = false,
    (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_field) = {
      example: "\"1.1\"",
      format: "sdk.Dec"
    }];
}